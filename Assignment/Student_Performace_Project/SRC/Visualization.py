# -*- coding: utf-8 -*-
"""Student_Performance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYG04iSSt2jhxz_-qrOde70UrYzTCj2T
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the cleaned dataset
df = pd.read_csv("/content/Cleaned_StudentsPerformance.csv")

# Create a grouped bar chart
plt.figure(figsize=(10, 6))
sns.barplot(data=df, x='test preparation course', y='math score', hue='test preparation course', palette='Set2')
plt.title('Math Score based on Level of Preparation')
plt.xlabel('Test Preparation Course')
plt.ylabel('Math Score')
plt.legend(title='Test Preparation', loc='upper left')
plt.show()



# Create a box plot
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='race/ethnicity', y='reading score', hue='race/ethnicity', palette='Set3', legend=False)
plt.title('Reading Score By Race')
plt.xlabel('Race/Ethnicity')
plt.ylabel('Reading Score')
plt.show()


# Perform t-tests
male_math_scores = df[df['gender'] == 'male']['math score']
female_math_scores = df[df['gender'] == 'female']['math score']
male_reading_scores = df[df['gender'] == 'male']['reading score']
female_reading_scores = df[df['gender'] == 'female']['reading score']
male_writing_scores = df[df['gender'] == 'male']['writing score']
female_writing_scores = df[df['gender'] == 'female']['writing score']

t_statistic_math, p_value_math = ttest_ind(male_math_scores, female_math_scores)
t_statistic_reading, p_value_reading = ttest_ind(male_reading_scores, female_reading_scores)
t_statistic_writing, p_value_writing = ttest_ind(male_writing_scores, female_writing_scores)

# Calculate mean scores by gender
mean_scores_by_gender = df.groupby('gender')[['math score', 'reading score', 'writing score']].mean().reset_index()

# Melt the DataFrame to reshape it for visualization
mean_scores_melted = pd.melt(mean_scores_by_gender, id_vars='gender', var_name='subject', value_name='mean score')

# Create bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x='gender', y='mean score', hue='subject', data=mean_scores_melted)
plt.title('Mean Scores by Gender')
plt.xlabel('Gender')
plt.ylabel('Mean Score')
plt.legend(title='Subject')
plt.show()

# Print t-test results
print("T-Statistic (Math):", t_statistic_math)
print("P-Value (Math):", p_value_math)
print("T-Statistic (Reading):", t_statistic_reading)
print("P-Value (Reading):", p_value_reading)
print("T-Statistic (Writing):", t_statistic_writing)
print("P-Value (Writing):", p_value_writing)


plt.figure(figsize=(8, 6))
sns.heatmap(data.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()






# Group the data by race/ethnicity and parental level of education and count the number of occurrences
education_race_counts = data.groupby(['race/ethnicity', 'parental level of education']).size().unstack()

# Plot stacked bar charts
education_race_counts.plot(kind='bar', stacked=True, figsize=(12, 8))

# Set plot labels and title
plt.title('Distribution of Parental Education Level by Race/Ethnicity')
plt.xlabel('Race/Ethnicity')
plt.ylabel('Count')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability

# Show the plot
plt.legend(title='Parental Education Level', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()