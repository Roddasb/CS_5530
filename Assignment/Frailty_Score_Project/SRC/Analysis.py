
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYG04iSSt2jhxz_-qrOde70UrYzTCj2T
"""

import pandas as pd

# Read the data from the CSV file
df = pd.read_csv("/content/Clean_Frailty_Score.csv")

# Perform descriptive statistics
descriptive_stats = df.describe()

# Display the descriptive statistics
print(descriptive_stats)

import pandas as pd
from scipy.stats import ttest_ind

# Read the dataset from the specified path
df = pd.read_csv("/content/Clean_Frailty_Score.csv")

# Strip any leading or trailing whitespaces from column names
df.columns = df.columns.str.strip()

# Check for and handle null values
df = df.dropna()

# Convert Frailty column to numeric values (0 for 'N', 1 for 'Y')
df['Frailty'] = df['Frailty'].replace({'N': 0, 'Y': 1})

# Check data types and unique values
print("Data Types:")
print(df.dtypes)
print("\nUnique Values in Frailty Column:")
print(df['Frailty'].unique())

# Perform t-test
t_statistic, p_value = ttest_ind(df[df['Frailty'] == 0]['Grip strength'], df[df['Frailty'] == 1]['Grip strength'])

# Display the preprocessed dataset
print("\nPreprocessed Dataset:")
print(df)

# Print t-test results
print("\nT-Statistic:", t_statistic)
print("P-Value:", p_value)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind


# Read the data from the CSV file
df = pd.read_csv("/content/Clean_Frailty_Score.csv")

# Perform descriptive statistics
descriptive_stats = df.describe()

# Display the descriptive statistics
print(descriptive_stats)


# Calculate correlation matrix
correlation_matrix = df.corr()

# Display correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)

# Check data types and unique values
print("Data Types:")
print(df.dtypes)
print("\nUnique Values in Frailty Column:")
print(df['Frailty'].unique())

# Perform t-test
t_statistic, p_value = ttest_ind(df[df['Frailty'] == 0]['Grip strength'], df[df['Frailty'] == 1]['Grip strength'])

# Display the preprocessed dataset
print("\nPreprocessed Dataset:")
print(df)

# Print t-test results
print("\nT-Statistic:", t_statistic)
print("P-Value:", p_value)


numeric_df = df.select_dtypes(include=['float64', 'int64'])
correlation_matrix = numeric_df.corr()
print("\nCorrelation Matrix:")
print(correlation_matrix)

# Visualize correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

# Comparison of Grip Strength by Frailty Status
frail = df[df['Frailty'] == 1]['Grip strength']
not_frail = df[df['Frailty'] == 0]['Grip strength']

t_statistic, p_value = ttest_ind(frail, not_frail)

print("\nComparison of Grip Strength by Frailty Status:")
print("T-Statistic:", t_statistic)
print("P-Value:", p_value)

# Calculate correlation coefficient between Grip strength and Frailty
correlation_coefficient = df['Grip strength'].corr(df['Frailty'])

print("Correlation coefficient between Grip strength and Frailty:", correlation_coefficient)


# Visualization of age distribution by frailty category
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='Frailty', y='Age')
plt.title('Age Distribution by Frailty')
plt.xlabel('Frailty')
plt.ylabel('Age')
plt.show()

# Summary statistics of age by frailty category
summary_stats = df.groupby('Frailty')['Age'].describe()
print("Summary Statistics of Age by Frailty:")
print(summary_stats)


# Plotting
plt.figure(figsize=(8, 6))
plt.scatter(df['Age'], df['Grip strength'], color='blue', alpha=0.7)
plt.title('Scatter Plot of Age vs Grip Strength')
plt.xlabel('Age (years)')
plt.ylabel('Grip Strength (kilograms)')
plt.grid(True)
plt.show()




# Plotting
plt.figure(figsize=(8, 6))
plt.scatter(df['Weight'], df['Grip strength'], color='green', alpha=0.7)
plt.title('Scatter Plot of Weight vs Grip Strength')
plt.xlabel('Weight (pounds)')
plt.ylabel('Grip Strength (kilograms)')
plt.grid(True)
plt.show()




# Group the data by Frailty and calculate mean grip strength for each group
grouped_data = df.groupby('Frailty')['Grip strength'].mean()

# Plotting
plt.figure(figsize=(8, 6))
grouped_data.plot(kind='bar', color=['blue', 'red'])
plt.title('Mean Grip Strength by Frailty')
plt.xlabel('Frailty')
plt.ylabel('Mean Grip Strength (kilograms)')
plt.xticks(ticks=[0, 1], labels=['No Frailty', 'Frailty'], rotation=0)
plt.grid(axis='y')
plt.show()



# Group the data by Frailty and calculate mean grip strength and age for each group
grouped_data = df.groupby('Frailty')[['Grip strength', 'Age']].mean()

# Plotting
plt.figure(figsize=(10, 6))

import statsmodels.api as sm
import pandas as pd

# Read the data from the CSV file
df = pd.read_csv("/content/Clean_Frailty_Score.csv")

# Define the independent variables (age and grip strength)
X = df[['Age', 'Grip strength']]

# Add constant for the intercept term
X = sm.add_constant(X)

# Define the dependent variable (frailty score)
y = df['Frailty']

# Fit logistic regression model
logit_model = sm.Logit(y, X)
result = logit_model.fit()

# Print summary of logistic regression
print(result.summary())